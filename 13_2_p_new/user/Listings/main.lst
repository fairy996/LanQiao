C51 COMPILER V9.60.7.0   MAIN                                                              04/01/2024 22:24:01 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Program Files\ARM\Core\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\hardware) DEBUG
                    - OBJECTEXTEND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "sys.h"
   2          
   3          /***************参数设置*******************/
   4          // 按键
   5          uchar Key_Slow_Down;
   6          uchar Key_Val, Key_Old, Key_Up, Key_Down;
   7          // 数码管
   8          uint NiXie_SLow_Down;
   9          uchar NiXie_location;
  10          uchar NiXie_Value[8] = {16, 16, 16, 16, 16, 16, 16, 16};
  11          uchar NiXie_Point[8] = {0, 0, 0, 0, 0, 0, 0, 0};
  12          // LED相关
  13          uchar LED[8] = {0, 0, 0, 0, 0, 0, 0, 0};
  14          
  15          // 时间相关参数
  16          uchar time_100ms;
  17          uchar time_500ms;
  18          // 界面相关参数
  19          uchar state = 0; // 默认为电压界面0 1 测距界面 2 参数界面
  20          // 数据内容
  21          uchar V_UpLimit = 45;
  22          uchar V_DownLimit = 5;
  23          uint distance;
  24          uchar V_Analog;
  25          uint V_Digital;
  26          uchar dac_out;
  27          // 标志位
  28          uchar LED_Light_Flag = 0;
  29          uchar Distance_Flag = 0;
  30          uchar limit_flag = 0; // 上电时为参数上限
  31          uchar test_flag;
  32          void NiXie_Clear()
  33          {
  34   1          uchar i;
  35   1          for (i = 0; i < 8; i++)
  36   1          {
  37   2              NiXie_Value[i] = 16;
  38   2              NiXie_Point[i] = 0;
  39   2          }
  40   1      }
  41          
  42          void Key_pro()
  43          {
  44   1          if (Key_Slow_Down)
  45   1              return;
  46   1          Key_Slow_Down = 1;
  47   1      
  48   1          Key_Val = Key_Scan_freestanding();
  49   1          Key_Down = Key_Val & (Key_Old ^ Key_Val);
  50   1          Key_Up = ~Key_Val & (Key_Old ^ Key_Val);
  51   1          Key_Old = Key_Val;
  52   1      
  53   1          switch (Key_Down)
  54   1          {
C51 COMPILER V9.60.7.0   MAIN                                                              04/01/2024 22:24:01 PAGE 2   

  55   2          case 4:
  56   2              NiXie_Clear();
  57   2              if (state == 0)
  58   2              {
  59   3                  state = 1;
  60   3              }
  61   2              else if (state == 1)
  62   2              {
  63   3                  state = 2;
  64   3                  limit_flag = 0;
  65   3                  Distance_Flag = 0;
  66   3              }
  67   2              else if (state == 2)
  68   2              {
  69   3                  state = 0;
  70   3              }
  71   2              break;
  72   2          case 5:
  73   2              if (state == 2)
  74   2              {
  75   3                  NiXie_Clear();
  76   3                  limit_flag = ~limit_flag;
  77   3              }
  78   2              break;
  79   2          case 6:
  80   2              if (state == 2)
  81   2              {
  82   3                  NiXie_Clear();
  83   3                  if (limit_flag == 0)
  84   3                  {
  85   4                      V_UpLimit += 5;
  86   4                      if (V_UpLimit > 50)
  87   4                          V_UpLimit = 5;
  88   4                  }
  89   3                  else
  90   3                  {
  91   4                      V_DownLimit += 5;
  92   4                      if (V_DownLimit > 50)
  93   4                          V_DownLimit = 5;
  94   4                  }
  95   3              }
  96   2              break;
  97   2          case 7:
  98   2              if (state == 2)
  99   2              {
 100   3                  NiXie_Clear();
 101   3                  if (limit_flag == 0)
 102   3                  {
 103   4                      V_UpLimit -= 5;
 104   4                      if (V_UpLimit < 5)
 105   4                          V_UpLimit = 50;
 106   4                  }
 107   3                  else
 108   3                  {
 109   4                      V_DownLimit -= 5;
 110   4                      if (V_DownLimit < 5)
 111   4                          V_DownLimit = 50;
 112   4                  }
 113   3              }
 114   2              break;
 115   2          }
 116   1      }
C51 COMPILER V9.60.7.0   MAIN                                                              04/01/2024 22:24:01 PAGE 3   

 117          
 118          void NiXie_pro()
 119          {
 120   1          if (NiXie_SLow_Down)
 121   1              return;
 122   1          NiXie_SLow_Down = 1;
 123   1          V_Analog = adc_read(0x03);
 124   1          V_Digital = (V_Analog * 100) / 255 * 5;
 125   1          distance = measure_distance();
 126   1          if (state != 2)
 127   1          {
 128   2              Distance_Flag = ((V_Digital > V_DownLimit * 10) && (V_Digital < V_UpLimit * 10));
 129   2          }
 130   1          if (state == 0)
 131   1          {
 132   2              NiXie_Value[0] = 17;
 133   2              NiXie_Value[5] = V_Digital / 100;
 134   2              NiXie_Value[6] = V_Digital % 100 / 10;
 135   2              NiXie_Value[7] = V_Digital % 10;
 136   2              NiXie_Point[5] = 1;
 137   2          }
 138   1          else if (state == 1)
 139   1          {
 140   2              NiXie_Value[0] = 19;
 141   2              if (Distance_Flag)
 142   2              {
 143   3                  if (distance > 100)
 144   3                  {
 145   4                      NiXie_Value[5] = distance / 100;
 146   4                      NiXie_Value[6] = distance % 100 / 10;
 147   4                      NiXie_Value[7] = distance % 10;
 148   4                  }
 149   3                  else if (distance > 10)
 150   3                  {
 151   4                      NiXie_Value[6] = distance / 10;
 152   4                      NiXie_Value[7] = distance % 10;
 153   4                  }
 154   3                  else if (distance > 0)
 155   3                      NiXie_Value[7] = distance;
 156   3              }
 157   2              else
 158   2              {
 159   3                  NiXie_Value[5] = 10;
 160   3                  NiXie_Value[6] = 10;
 161   3                  NiXie_Value[7] = 10;
 162   3              }
 163   2          }
 164   1          else if (state == 2)
 165   1          {
 166   2              NiXie_Value[0] = 20;
 167   2              NiXie_Value[3] = V_UpLimit / 10;
 168   2              NiXie_Value[4] = V_UpLimit % 10;
 169   2              NiXie_Value[6] = V_DownLimit / 10;
 170   2              NiXie_Value[7] = V_DownLimit % 10;
 171   2              NiXie_Point[3] = 1;
 172   2              NiXie_Point[6] = 1;
 173   2          }
 174   1      }
 175          
 176          void Led_pro()
 177          {
 178   1          LED[0] = (state == 0);
C51 COMPILER V9.60.7.0   MAIN                                                              04/01/2024 22:24:01 PAGE 4   

 179   1          LED[1] = (state == 1);
 180   1          LED[2] = (state == 2);
 181   1          LED[7] = (Distance_Flag) ? LED_Light_Flag : 0;
 182   1      }
 183          
 184          void DAC_pro()
 185          {
 186   1          unsigned char dac_out_analog;
 187   1          if (Distance_Flag)
 188   1          {
 189   2              if (distance > 20)
 190   2                  dac_out_analog = 1 + (1 / 15) * (distance - 20);
 191   2              else if (distance > 80)
 192   2                  dac_out_analog = 5;
 193   2              else
 194   2                  dac_out_analog = 1;
 195   2              dac_out = (dac_out_analog / 5) * 255;
 196   2              dac_export(dac_out);
 197   2          }
 198   1      }
 199          
 200          void Timer0_Isr(void) interrupt 1
 201          {
 202   1          if (++Key_Slow_Down == 10)
 203   1              Key_Slow_Down = 0;
 204   1          if (++NiXie_SLow_Down == 500)
 205   1              NiXie_SLow_Down = 0;
 206   1          if (++NiXie_location == 8)
 207   1              NiXie_location = 0;
 208   1          // if (++time_100ms == 100)
 209   1          // {
 210   1          //     time_100ms = 0;
 211   1          //     LED_Light_Flag = ~LED_Light_Flag;
 212   1          // }
 213   1          NiXie_Display(NiXie_location, NiXie_Value[NiXie_location], NiXie_Point[NiXie_location]);
 214   1          Led_Display(NiXie_location, LED[NiXie_location]);
 215   1      }
 216          
 217          void Timer0_Init(void) // 1毫秒@12.000MHz
 218          {
 219   1          AUXR &= 0x7F; // 定时器时钟12T模式
 220   1          TMOD &= 0xF0; // 设置定时器模式
 221   1          TL0 = 0x18;   // 设置定时初始值
 222   1          TH0 = 0xFC;   // 设置定时初始值
 223   1          TF0 = 0;      // 清除TF0标志
 224   1          TR0 = 1;      // 定时器0开始计时
 225   1          ET0 = 1;      // 使能定时器0中断
 226   1          EA = 1;        // 使能总中断
 227   1      }
 228          
 229          void main()
 230          {
 231   1          Init_Sys();
 232   1          Timer0_Init();
 233   1          while (1)
 234   1          {
 235   2              Key_pro();
 236   2              Led_pro();
 237   2              DAC_pro();
 238   2              NiXie_pro();
 239   2          }
 240   1      }
C51 COMPILER V9.60.7.0   MAIN                                                              04/01/2024 22:24:01 PAGE 5   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    813    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     47       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
