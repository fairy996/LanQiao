C51 COMPILER V9.60.7.0   MAIN                                                              04/09/2024 23:09:17 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Program Files\ARM\Core\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\HardWare) DEBUG
                    - OBJECTEXTEND PRINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "sys.h"
   2          
   3          //************参数**************
   4          // 按键
   5          unsigned int Key_Slow_Down;
   6          unsigned char Key_Val;
   7          unsigned char Key_Down;
   8          unsigned char Key_Up;
   9          unsigned char Key_Old;
  10          // 数码管
  11          unsigned int NiXie_Slow_Down;
  12          unsigned char NiXie_Location;
  13          unsigned char NiXie_Value[8] = {16, 16, 16, 16, 16, 16, 16, 16};
  14          unsigned char NiXie_Dot[8] = {0, 0, 0, 0, 0, 0, 0, 0};
  15          // LED
  16          unsigned char Led_Value[8] = {0, 0, 0, 0, 0, 0, 0, 0};
  17          
  18          // 时间变量
  19          unsigned char time_100ms;
  20          unsigned char time_500ms;
  21          // 数据
  22          unsigned int temp_val;
  23          unsigned int distance_val;
  24          unsigned char temp_para;
  25          unsigned char distance_para;
  26          char Calibration;
  27          unsigned int speed;
  28          unsigned char dac_limit;
  29          unsigned char dac_out;
  30          // 标志位
  31          bit distance_unit = 0;           // 0 cm 1 m
  32          bit para_flag = 0;     // 0 距离参数 1 温度参数
  33          unsigned char factory_state = 0; // 0 校准值 1 介质设置 2 DAC输出设置
  34          unsigned char state = 340;       // 0 测距 1 参数 2 工厂
  35          unsigned char Led_light;
  36          unsigned char Relay_flag = 0; // 0断开 1吸合
  37          void Init_State()
  38          {
  39   1          state = 0;
  40   1          distance_unit = 0;
  41   1          temp_para = 30;
  42   1          distance_para = 40;
  43   1          Calibration = 0;
  44   1          speed = 340;
  45   1          dac_limit = 10;
  46   1      }
  47          void Clear_NiXie()
  48          {
  49   1          unsigned char i;
  50   1          for (i = 0; i < 8; i++)
  51   1          {
  52   2              NiXie_Value[i] = 16;
  53   2              NiXie_Dot[i] = 0;
  54   2          }
C51 COMPILER V9.60.7.0   MAIN                                                              04/09/2024 23:09:17 PAGE 2   

  55   1      }
  56          
  57          void Key_pro()
  58          {
  59   1          if (Key_Slow_Down)
  60   1              return;
  61   1          Key_Slow_Down = 1;
  62   1      
  63   1          Key_Val = Key_Scan();
  64   1          Key_Down = Key_Val & (Key_Old ^ Key_Val); // 捕捉按键下降沿
  65   1          Key_Up = ~Key_Val & (Key_Old ^ Key_Val);  // 捕捉按键上降沿
  66   1          Key_Old = Key_Val;
  67   1      
  68   1          switch (Key_Down)
  69   1          {
  70   2          case 4:
  71   2              Clear_NiXie();
  72   2              if (state == 0)
  73   2              {
  74   3                  state = 1;
  75   3              }
  76   2              else if (state == 1)
  77   2              {
  78   3                  state = 2;
  79   3              }
  80   2      
  81   2              else if (state == 2)
  82   2              {
  83   3                  state = 0;
  84   3              }
  85   2              break;
  86   2          case 5:
  87   2              Clear_NiXie();
  88   2              if (state == 0)
  89   2              {
  90   3                  distance_unit = ~distance_unit;
  91   3              }
  92   2              else if (state == 1)
  93   2              {
  94   3                  para_flag ^= 1;
  95   3              }
  96   2      
  97   2              else if (state == 2)
  98   2              {
  99   3                  if (factory_state == 0)
 100   3                      factory_state = 1;
 101   3                  else if (factory_state == 1)
 102   3                      factory_state = 2;
 103   3                  else if (factory_state == 2)
 104   3                      factory_state = 0;
 105   3              }
 106   2              break;
 107   2          case 8:
 108   2              Clear_NiXie();
 109   2              if (state == 1)
 110   2              {
 111   3                  if (para_flag)
 112   3                  {
 113   4                      if (++temp_para == 80)
 114   4                      {
 115   5                          temp_para = 80;
 116   5                      }
C51 COMPILER V9.60.7.0   MAIN                                                              04/09/2024 23:09:17 PAGE 3   

 117   4                  }
 118   3                  else
 119   3                  {
 120   4                      distance_para += 10;
 121   4                      if (distance_para >= 99)
 122   4                      {
 123   5                          distance_para = 99;
 124   5                      }
 125   4                  }
 126   3              }
 127   2              else if (state == 2)
 128   2              {
 129   3                  if (factory_state == 0)
 130   3                  {
 131   4                      Calibration += 5;
 132   4                      if (Calibration >= 90)
 133   4                      {
 134   5                          Calibration = 90;
 135   5                      }
 136   4                  }
 137   3                  else if (factory_state == 1)
 138   3                  {
 139   4                      speed += 10;
 140   4                      if (speed >= 9990)
 141   4                      {
 142   5                          speed = 9990;
 143   5                      }
 144   4                  }
 145   3                  else if (factory_state == 2)
 146   3                  {
 147   4                      if (++dac_limit == 20)
 148   4                      {
 149   5                          dac_limit = 20;
 150   5                      }
 151   4                  }
 152   3              }
 153   2              break;
 154   2          case 9:
 155   2              Clear_NiXie();
 156   2              if (state == 1)
 157   2              {
 158   3                  if (para_flag)
 159   3                  {
 160   4                      if (--temp_para == 0)
 161   4                      {
 162   5                          temp_para = 0;
 163   5                      }
 164   4                  }
 165   3                  else
 166   3                  {
 167   4                      distance_para -= 10;
 168   4                      if (distance_para <= 10)
 169   4                      {
 170   5                          distance_para = 10;
 171   5                      }
 172   4                  }
 173   3              }
 174   2              else if (state == 2)
 175   2              {
 176   3                  if (factory_state == 0)
 177   3                  {
 178   4                      Calibration -= 5;
C51 COMPILER V9.60.7.0   MAIN                                                              04/09/2024 23:09:17 PAGE 4   

 179   4                      if (Calibration <= -90)
 180   4                      {
 181   5                          Calibration = -90;
 182   5                      }
 183   4                  }
 184   3                  else if (factory_state == 1)
 185   3                  {
 186   4                      speed -= 10;
 187   4                      if (speed <= 10)
 188   4                      {
 189   5                          speed = 10;
 190   5                      }
 191   4                  }
 192   3                  else if (factory_state == 2)
 193   3                  {
 194   4                      if (--dac_limit == 1)
 195   4                      {
 196   5                          dac_limit = 1;
 197   5                      }
 198   4                  }
 199   3              }
 200   2              break;
 201   2          }
 202   1      }
 203          
 204          void NiXie_pro()
 205          {
 206   1          if (NiXie_Slow_Down)
 207   1              return;
 208   1          NiXie_Slow_Down = 1;
 209   1      
 210   1          // temp_val = Read_Temperature();
 211   1      
 212   1          if ((distance_val >= distance_para + 5) && (distance_val <= distance_para + 5) && (temp_val <= temp_pa
             -ra * 10))
 213   1          {
 214   2              Relay_flag = 1;
 215   2          }
 216   1          else
 217   1          {
 218   2              Relay_flag = 0;
 219   2          }
 220   1          if (state == 0)
 221   1          {
 222   2              NiXie_Value[0] = temp_val / 100;
 223   2              NiXie_Value[1] = (temp_val % 100) / 10;
 224   2              NiXie_Value[2] = temp_val % 10;
 225   2              NiXie_Dot[1] = 1;
 226   2              NiXie_Value[3] = 18;
 227   2              NiXie_Value[4] = (distance_val / 1000) ? (distance_val / 1000) : 16;
 228   2              if (distance_val / 1000)
 229   2              {
 230   3                  NiXie_Value[5] = ((distance_val % 1000) / 100) ? ((distance_val % 1000) / 100) : 0;
 231   3                  NiXie_Value[6] = ((distance_val % 100) / 10) ? ((distance_val % 100) / 10) : 0;
 232   3                  NiXie_Value[7] = (distance_val % 10) ? (distance_val % 10) : 0;
 233   3              }
 234   2              else
 235   2              {
 236   3                  if (distance_unit)
 237   3                  {
 238   4                      NiXie_Value[5] = ((distance_val % 1000) / 100) ? ((distance_val % 1000) / 100) : 0;
 239   4                      NiXie_Value[6] = ((distance_val % 100) / 10) ? ((distance_val % 100) / 10) : 0;
C51 COMPILER V9.60.7.0   MAIN                                                              04/09/2024 23:09:17 PAGE 5   

 240   4                      NiXie_Value[7] = (distance_val % 10) ? (distance_val % 10) : 0;
 241   4                  }
 242   3                  else
 243   3                  {
 244   4                      NiXie_Value[5] = ((distance_val % 1000) / 100) ? ((distance_val % 1000) / 100) : 16;
 245   4                      if ((distance_val % 1000) / 100)
 246   4                      {
 247   5                          NiXie_Value[6] = ((distance_val % 100) / 10) ? ((distance_val % 100) / 10) : 0;
 248   5                          NiXie_Value[7] = (distance_val % 10) ? (distance_val % 10) : 0;
 249   5                      }
 250   4                      else
 251   4                      {
 252   5                          NiXie_Value[6] = ((distance_val % 100) / 10) ? ((distance_val % 100) / 10) : 16;
 253   5                          NiXie_Value[7] = (distance_val % 10) ? (distance_val % 10) : 0;
 254   5                      }
 255   4                  }
 256   3              }
 257   2              NiXie_Dot[5] = (distance_unit);
 258   2          }
 259   1          else if (state == 1)
 260   1          {
 261   2              NiXie_Value[0] = 17;
 262   2              if (para_flag == 1)
 263   2              {
 264   3                  NiXie_Value[1] = 2;
 265   3                  NiXie_Value[6] = temp_para / 10;
 266   3                  NiXie_Value[7] = temp_para % 10;
 267   3              }
 268   2              else
 269   2              {
 270   3                  NiXie_Value[1] = 1;
 271   3                  NiXie_Value[6] = distance_para / 10;
 272   3                  NiXie_Value[7] = distance_para % 10;
 273   3              }
 274   2          }
 275   1          else if (state == 2)
 276   1          {
 277   2              NiXie_Value[0] = 15;
 278   2              NiXie_Value[1] = factory_state + 1;
 279   2              if (factory_state == 0)
 280   2              {
 281   3                  if (Calibration < -10)
 282   3                  {
 283   4                      NiXie_Value[5] = 18;
 284   4                      NiXie_Value[6] = (-Calibration / 10);
 285   4                      NiXie_Value[7] = (-Calibration % 10);
 286   4                  }
 287   3                  else if (Calibration < 0)
 288   3                  {
 289   4                      NiXie_Value[5] = 16;
 290   4                      NiXie_Value[6] = 18;
 291   4                      NiXie_Value[7] = (-Calibration);
 292   4                  }
 293   3                  else
 294   3                  {
 295   4                      NiXie_Value[5] = (Calibration / 100) ? (Calibration / 100) : 16;
 296   4                      if (Calibration / 100)
 297   4                      {
 298   5                          NiXie_Value[6] = ((Calibration % 100) / 10) ? ((Calibration % 100) / 10) : 0;
 299   5                          NiXie_Value[7] = Calibration % 10;
 300   5                      }
 301   4                      else
C51 COMPILER V9.60.7.0   MAIN                                                              04/09/2024 23:09:17 PAGE 6   

 302   4                      {
 303   5                          NiXie_Value[6] = ((Calibration % 100) / 10) ? ((Calibration % 100) / 10) : 16;
 304   5                          NiXie_Value[7] = Calibration % 10;
 305   5                      }
 306   4                  }
 307   3              }
 308   2              else if (factory_state == 1)
 309   2              {
 310   3                  NiXie_Value[4] = (speed / 1000) ? (speed / 1000) : 16;
 311   3                  if (speed / 1000)
 312   3                  {
 313   4                      NiXie_Value[5] = ((speed % 1000) / 100) ? ((speed % 1000) / 100) : 0;
 314   4                      NiXie_Value[6] = ((speed % 100) / 10) ? ((speed % 100) / 10) : 0;
 315   4                      NiXie_Value[6] = speed % 10;
 316   4                  }
 317   3                  else
 318   3                  {
 319   4                      NiXie_Value[5] = ((speed % 1000) / 100) ? ((speed % 1000) / 100) : 16;
 320   4                      if ((speed % 1000) / 100)
 321   4                      {
 322   5                          NiXie_Value[6] = ((speed % 100) / 10) ? ((speed % 100) / 10) : 0;
 323   5                          NiXie_Value[6] = speed % 10;
 324   5                      }
 325   4                      else
 326   4                      {
 327   5                          NiXie_Value[6] = ((speed % 100) / 10) ? ((speed % 100) / 10) : 16;
 328   5                          NiXie_Value[6] = speed % 10;
 329   5                      }
 330   4                  }
 331   3              }
 332   2              else if (factory_state == 2)
 333   2              {
 334   3                  NiXie_Value[6] = dac_limit / 10;
 335   3                  NiXie_Value[7] = dac_limit % 10;
 336   3                  NiXie_Dot[6] = 1;
 337   3              }
 338   2          }
 339   1      }
 340          
 341          void Led_pro()
 342          {
 343   1          if (distance_val < 10)
 344   1              dac_out = (dac_limit / 5) * 255;
 345   1          else if (distance_val > 90)
 346   1              dac_out = 255;
 347   1          else
 348   1              dac_out = ((dac_limit + (5 - dac_limit) / 80 * (distance_val - 10)) / 5) * 255;
 349   1          dac_output(dac_out);
 350   1          if (state == 0)
 351   1          {
 352   2              Led_Value[0] = (distance_val & 0x01);
 353   2              Led_Value[1] = (distance_val & 0x02);
 354   2              Led_Value[2] = (distance_val & 0x04);
 355   2              Led_Value[3] = (distance_val & 0x08);
 356   2              Led_Value[4] = (distance_val & 0x10);
 357   2              Led_Value[5] = (distance_val & 0x20);
 358   2              Led_Value[6] = (distance_val & 0x40);
 359   2              Led_Value[7] = (distance_val & 0x80);
 360   2          }
 361   1          else if (state == 1)
 362   1          {
 363   2              Led_Value[7] = 1;
C51 COMPILER V9.60.7.0   MAIN                                                              04/09/2024 23:09:17 PAGE 7   

 364   2          }
 365   1          else if (state == 2)
 366   1          {
 367   2              Led_Value[0] = Led_light;
 368   2          }
 369   1      }
 370          
 371          void Timer0_Isr(void) interrupt 1
 372          {
 373   1          if (++Key_Slow_Down == 10)
 374   1              Key_Slow_Down = 0;
 375   1          if (++NiXie_Slow_Down == 200)
 376   1              NiXie_Slow_Down = 0;
 377   1          if (++NiXie_Location == 8)
 378   1              NiXie_Location = 0;
 379   1          if (++time_500ms == 500)
 380   1          {
 381   2              time_500ms = 0;
 382   2              // distance_val = Measure_Distance();
 383   2          }
 384   1          if (state == 2)
 385   1          {
 386   2              if (++time_100ms == 100)
 387   2              {
 388   3                  time_100ms = 0;
 389   3                  Led_light = ~Led_light;
 390   3              }
 391   2          }
 392   1          NiXie_Display(NiXie_Location, NiXie_Value[NiXie_Location], NiXie_Dot[NiXie_Location]);
 393   1          LED_Display(NiXie_Location, Led_Value[NiXie_Location]);
 394   1          Relay(Relay_flag);
 395   1      }
 396          
 397          void Timer0_Init(void) // 1毫秒@12.000MHz
 398          {
 399   1          AUXR &= 0x7F; // 定时器时钟12T模式
 400   1          TMOD &= 0xF0; // 设置定时器模式
 401   1          TL0 = 0x18;   // 设置定时初始值
 402   1          TH0 = 0xFC;   // 设置定时初始值
 403   1          TF0 = 0;      // 清除TF0标志
 404   1          TR0 = 1;      // 定时器0开始计时
 405   1          ET0 = 1;      // 使能定时器0中断
 406   1          EA = 1;       //
 407   1      }
 408          
 409          void main()
 410          {
 411   1          temp_val = Read_Temperature();
 412   1          while (temp_val == 850)
 413   1          {
 414   2              temp_val = Read_Temperature();
 415   2          }
 416   1          Init_Sys();
 417   1          Init_State();
 418   1          Timer0_Init();
 419   1          // Timer1_Init();
 420   1          while (1)
 421   1          {
 422   2              Key_pro();
 423   2              NiXie_pro();
 424   2              Led_pro();
 425   2          }
C51 COMPILER V9.60.7.0   MAIN                                                              04/09/2024 23:09:17 PAGE 8   

 426   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1881    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     50    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
