C51 COMPILER V9.60.7.0   MAIN                                                              04/09/2024 16:43:17 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Program Files\ARM\Core\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\HardWare) DEBUG
                    - OBJECTEXTEND PRINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "sys.h"
   2          
   3          //************参数**************
   4          // 按键
   5          unsigned int Key_Slow_Down;
   6          unsigned char Key_Val;
   7          unsigned char Key_Down;
   8          unsigned char Key_Up;
   9          unsigned char Key_Old;
  10          // 数码管
  11          unsigned int NiXie_Slow_Down;
  12          unsigned char NiXie_Location;
  13          unsigned char NiXie_Value[8] = {16, 16, 16, 16, 16, 16, 16, 16};
  14          unsigned char NiXie_Dot[8] = {0, 0, 0, 0, 0, 0, 0, 0};
  15          // LED
  16          unsigned char Led_Value[8] = {0, 0, 0, 0, 0, 0, 0, 0};
  17          
  18          // 时间变量
  19          unsigned char time_100ms;
  20          // 数据
  21          unsigned int temp_val;
  22          unsigned int distance_val;
  23          unsigned char temp_para;
  24          unsigned char distance_para;
  25          char Calibration;
  26          unsigned int speed;
  27          unsigned char dac_limit;
  28          unsigned char dac_out;
  29          // 标志位
  30          unsigned char distance_unit;     // 0 cm 1 m
  31          unsigned char para_flag;         // 0 距离参数 1 温度参数
  32          unsigned char factory_state = 0; // 0 校准值 1 介质设置 2 DAC输出设置
  33          unsigned char state;             // 0 测距 1 参数 2 工厂
  34          unsigned char Led_light;
  35          unsigned char Relay_flag = 0; // 0断开 1吸合
  36          void Init_State()
  37          {
  38   1          state = 0;
  39   1          distance_unit = 0;
  40   1          temp_para = 30;
  41   1          distance_para = 40;
  42   1          Calibration = 0;
  43   1          speed = 340;
  44   1          dac_limit = 10;
  45   1      }
  46          void Clear_NiXie()
  47          {
  48   1          unsigned char i;
  49   1          for (i = 0; i < 8; i++)
  50   1          {
  51   2              NiXie_Value[i] = 16;
  52   2              NiXie_Dot[i] = 0;
  53   2          }
  54   1      }
C51 COMPILER V9.60.7.0   MAIN                                                              04/09/2024 16:43:17 PAGE 2   

  55          
  56          void Key_pro()
  57          {
  58   1          if (Key_Slow_Down)
  59   1              return;
  60   1          Key_Slow_Down = 1;
  61   1      
  62   1          Key_Val = Key_Scan();
  63   1          Key_Down = Key_Val & (Key_Val ^ Key_Old);
  64   1          Key_Up = ~Key_Val & (Key_Val ^ Key_Old);
  65   1          Key_Old = Key_Val;
  66   1      
  67   1          if (Key_Down == 4)
  68   1          {
  69   2              if (state == 0)
  70   2                  state = 1;
  71   2              else if (state == 1)
  72   2                  state = 2;
  73   2              else if (state == 2)
  74   2                  state = 0;
  75   2          }
  76   1          else if (Key_Down == 5)
  77   1          {
  78   2              if (state == 0)
  79   2                  distance_unit = ~distance_unit;
  80   2              else if (state == 1)
  81   2                  para_flag = ~para_flag;
  82   2              else if (state == 2)
  83   2              {
  84   3                  if (factory_state == 0)
  85   3                      factory_state = 1;
  86   3                  else if (factory_state == 1)
  87   3                      factory_state = 2;
  88   3                  else if (factory_state == 2)
  89   3                      factory_state = 0;
  90   3              }
  91   2          }
  92   1          else if (Key_Down == 8)
  93   1          {
  94   2              if (state == 1)
  95   2              {
  96   3                  if (para_flag)
  97   3                  {
  98   4                      if (++temp_para == 80)
  99   4                          temp_para = 80;
 100   4                  }
 101   3                  else
 102   3                  {
 103   4                      distance_para += 10;
 104   4                      if (distance_para >= 99)
 105   4                          distance_para = 99;
 106   4                  }
 107   3              }
 108   2              else if (state == 2)
 109   2              {
 110   3                  if (factory_state == 0)
 111   3                  {
 112   4                      Calibration += 5;
 113   4                      if (Calibration >= 90)
 114   4                          Calibration = 90;
 115   4                  }
 116   3                  else if (factory_state == 1)
C51 COMPILER V9.60.7.0   MAIN                                                              04/09/2024 16:43:17 PAGE 3   

 117   3                  {
 118   4                      speed += 10;
 119   4                      if (speed >= 9990)
 120   4                          speed = 9990;
 121   4                  }
 122   3                  else if (factory_state == 2)
 123   3                  {
 124   4                      if (++dac_limit == 20)
 125   4                          dac_limit = 20;
 126   4                  }
 127   3              }
 128   2              else if (state == 0) // 记录接下来6s超声波距离
 129   2              {
 130   3              }
 131   2          }
 132   1          else if (Key_Down == 9)
 133   1          {
 134   2              if (state == 1)
 135   2              {
 136   3                  if (para_flag)
 137   3                  {
 138   4                      if (--temp_para == 0)
 139   4                          temp_para = 0;
 140   4                  }
 141   3                  else
 142   3                  {
 143   4                      distance_para -= 10;
 144   4                      if (distance_para <= 10)
 145   4                          distance_para = 10;
 146   4                  }
 147   3              }
 148   2              else if (state == 2)
 149   2              {
 150   3                  if (factory_state == 0)
 151   3                  {
 152   4                      Calibration -= 5;
 153   4                      if (Calibration <= -90)
 154   4                          Calibration = -90;
 155   4                  }
 156   3                  else if (factory_state == 1)
 157   3                  {
 158   4                      speed -= 10;
 159   4                      if (speed <= 10)
 160   4                          speed = 10;
 161   4                  }
 162   3                  else if (factory_state == 2)
 163   3                  {
 164   4                      if (--dac_limit == 1)
 165   4                          dac_limit = 1;
 166   4                  }
 167   3              }
 168   2              else if (state == 0) // DAC输出记录的数据结果
 169   2              {
 170   3              }
 171   2          }
 172   1      }
 173          
 174          void NiXie_pro()
 175          {
 176   1          if (NiXie_Slow_Down)
 177   1              return;
 178   1          NiXie_Slow_Down = 1;
C51 COMPILER V9.60.7.0   MAIN                                                              04/09/2024 16:43:17 PAGE 4   

 179   1      
 180   1          temp_val = Read_Temperature();
 181   1          distance_val = (Measure_Distance() * speed) / 2 + Calibration;
 182   1          if ((distance_val >= distance_para + 5) && (distance_val <= distance_para + 5) && (temp_val <= temp_pa
             -ra * 10))
 183   1              Relay_flag = 1;
 184   1          else
 185   1              Relay_flag = 0;
 186   1          if (state == 0)
 187   1          {
 188   2              NiXie_Value[0] = temp_val / 100;
 189   2              NiXie_Value[1] = (temp_val % 100) / 10;
 190   2              NiXie_Value[2] = temp_val % 10;
 191   2              NiXie_Dot[1] = 1;
 192   2              NiXie_Value[3] = 18;
 193   2              NiXie_Value[4] = (distance_val / 1000) ? (distance_val / 1000) : 16;
 194   2              if (distance_val / 1000)
 195   2              {
 196   3                  NiXie_Value[5] = ((distance_val % 1000) / 100) ? ((distance_val % 1000) / 100) : 0;
 197   3                  NiXie_Value[6] = ((distance_val % 100) / 10) ? ((distance_val % 100) / 10) : 0;
 198   3                  NiXie_Value[7] = (distance_val % 10) ? (distance_val % 10) : 0;
 199   3              }
 200   2              else
 201   2              {
 202   3                  if (distance_unit)
 203   3                  {
 204   4                      NiXie_Value[5] = ((distance_val % 1000) / 100) ? ((distance_val % 1000) / 100) : 0;
 205   4                      NiXie_Value[6] = ((distance_val % 100) / 10) ? ((distance_val % 100) / 10) : 0;
 206   4                      NiXie_Value[7] = (distance_val % 10) ? (distance_val % 10) : 0;
 207   4                  }
 208   3                  else
 209   3                  {
 210   4                      NiXie_Value[5] = ((distance_val % 1000) / 100) ? ((distance_val % 1000) / 100) : 16;
 211   4                      if ((distance_val % 1000) / 100)
 212   4                      {
 213   5                          NiXie_Value[6] = ((distance_val % 100) / 10) ? ((distance_val % 100) / 10) : 0;
 214   5                          NiXie_Value[7] = (distance_val % 10) ? (distance_val % 10) : 0;
 215   5                      }
 216   4                      else
 217   4                      {
 218   5                          NiXie_Value[6] = ((distance_val % 100) / 10) ? ((distance_val % 100) / 10) : 16;
 219   5                          NiXie_Value[7] = (distance_val % 10) ? (distance_val % 10) : 0;
 220   5                      }
 221   4                  }
 222   3              }
 223   2              NiXie_Dot[5] = distance_unit;
 224   2          }
 225   1          else if (state == 1)
 226   1          {
 227   2              NiXie_Value[0] = 17;
 228   2              if (para_flag)
 229   2              {
 230   3                  NiXie_Value[1] = 2;
 231   3                  NiXie_Value[6] = temp_para / 10;
 232   3                  NiXie_Value[7] = temp_para % 10;
 233   3              }
 234   2              else
 235   2              {
 236   3                  NiXie_Value[1] = 1;
 237   3                  NiXie_Value[6] = distance_para / 10;
 238   3                  NiXie_Value[7] = distance_para % 10;
 239   3              }
C51 COMPILER V9.60.7.0   MAIN                                                              04/09/2024 16:43:17 PAGE 5   

 240   2          }
 241   1          else if (state == 2)
 242   1          {
 243   2              NiXie_Value[0] = 15;
 244   2              NiXie_Value[1] = factory_state + 1;
 245   2              if (factory_state == 0)
 246   2              {
 247   3                  if (Calibration < -10)
 248   3                  {
 249   4                      NiXie_Value[5] = 18;
 250   4                      NiXie_Value[6] = (-Calibration / 10);
 251   4                      NiXie_Value[7] = (-Calibration % 10);
 252   4                  }
 253   3                  else if (Calibration < 0)
 254   3                  {
 255   4                      NiXie_Value[5] = 16;
 256   4                      NiXie_Value[6] = 18;
 257   4                      NiXie_Value[7] = (-Calibration);
 258   4                  }
 259   3                  else
 260   3                  {
 261   4                      NiXie_Value[5] = (Calibration / 100) ? (Calibration / 100) : 16;
 262   4                      if (Calibration / 100)
 263   4                      {
 264   5                          NiXie_Value[6] = ((Calibration % 100) / 10) ? ((Calibration % 100) / 10) : 0;
 265   5                          NiXie_Value[7] = Calibration % 10;
 266   5                      }
 267   4                      else
 268   4                      {
 269   5                          NiXie_Value[6] = ((Calibration % 100) / 10) ? ((Calibration % 100) / 10) : 16;
 270   5                          NiXie_Value[7] = Calibration % 10;
 271   5                      }
 272   4                  }
 273   3              }
 274   2              else if (factory_state == 1)
 275   2              {
 276   3                  NiXie_Value[4] = (speed / 1000) ? (speed / 1000) : 16;
 277   3                  if (speed / 1000)
 278   3                  {
 279   4                      NiXie_Value[5] = ((speed % 1000) / 100) ? ((speed % 1000) / 100) : 0;
 280   4                      NiXie_Value[6] = ((speed % 100) / 10) ? ((speed % 100) / 10) : 0;
 281   4                      NiXie_Value[6] = speed % 10;
 282   4                  }
 283   3                  else
 284   3                  {
 285   4                      NiXie_Value[5] = ((speed % 1000) / 100) ? ((speed % 1000) / 100) : 16;
 286   4                      if ((speed % 1000) / 100)
 287   4                      {
 288   5                          NiXie_Value[6] = ((speed % 100) / 10) ? ((speed % 100) / 10) : 0;
 289   5                          NiXie_Value[6] = speed % 10;
 290   5                      }
 291   4                      else
 292   4                      {
 293   5                          NiXie_Value[6] = ((speed % 100) / 10) ? ((speed % 100) / 10) : 16;
 294   5                          NiXie_Value[6] = speed % 10;
 295   5                      }
 296   4                  }
 297   3              }
 298   2              else if (factory_state == 2)
 299   2              {
 300   3                  NiXie_Value[6] = dac_limit / 10;
 301   3                  NiXie_Value[7] = dac_limit % 10;
C51 COMPILER V9.60.7.0   MAIN                                                              04/09/2024 16:43:17 PAGE 6   

 302   3                  NiXie_Dot[6] = 1;
 303   3              }
 304   2          }
 305   1      }
 306          
 307          void Led_pro()
 308          {
 309   1          if (distance_val < 10)
 310   1              dac_out = (dac_limit / 5) * 255;
 311   1          else if (distance_val > 90)
 312   1              dac_out = 255;
 313   1          else
 314   1              dac_out = ((dac_limit + (5 - dac_limit) / 80 * (distance_val - 10)) / 5) * 255;
 315   1          dac_output(dac_out);
 316   1          if (state == 0)
 317   1          {
 318   2              Led_Value[0] = (distance_val & 0x01);
 319   2              Led_Value[1] = (distance_val & 0x02);
 320   2              Led_Value[2] = (distance_val & 0x04);
 321   2              Led_Value[3] = (distance_val & 0x08);
 322   2              Led_Value[4] = (distance_val & 0x10);
 323   2              Led_Value[5] = (distance_val & 0x20);
 324   2              Led_Value[6] = (distance_val & 0x40);
 325   2              Led_Value[7] = (distance_val & 0x80);
 326   2          }
 327   1          else if (state == 1)
 328   1          {
 329   2              Led_Value[7] = 1;
 330   2          }
 331   1          else if (state == 2)
 332   1          {
 333   2              Led_Value[0] = Led_light;
 334   2          }
 335   1      }
 336          
 337          void Timer0_Isr(void) interrupt 1
 338          {
 339   1          if (++Key_Slow_Down == 10)
 340   1              Key_Slow_Down = 0;
 341   1          if (++NiXie_Slow_Down == 200)
 342   1              NiXie_Slow_Down = 0;
 343   1          if (++NiXie_Location == 8)
 344   1              NiXie_Location = 0;
 345   1          if (state == 2)
 346   1          {
 347   2              if (++time_100ms == 100)
 348   2              {
 349   3                  time_100ms = 0;
 350   3                  Led_light = ~Led_light;
 351   3              }
 352   2          }
 353   1          NiXie_Display(NiXie_Location, NiXie_Value[NiXie_Location], NiXie_Dot[NiXie_Location]);
 354   1          LED_Display(NiXie_Location, Led_Value[NiXie_Location]);
 355   1          Relay(Relay_flag);
 356   1      }
 357          
 358          void Timer0_Init(void) // 1毫秒@12.000MHz
 359          {
 360   1          AUXR &= 0x7F; // 定时器时钟12T模式
 361   1          TMOD &= 0xF0; // 设置定时器模式
 362   1          TL0 = 0x18;   // 设置定时初始值
 363   1          TH0 = 0xFC;   // 设置定时初始值
C51 COMPILER V9.60.7.0   MAIN                                                              04/09/2024 16:43:17 PAGE 7   

 364   1          TF0 = 0;      // 清除TF0标志
 365   1          TR0 = 1;      // 定时器0开始计时
 366   1          ET0 = 1;      // 使能定时器0中断
 367   1          EA = 1;
 368   1      }
 369          void Timer1_Init(void) // 1毫秒@12.000MHz
 370          {
 371   1          AUXR &= 0xBF; // 定时器时钟12T模式
 372   1          TMOD &= 0x0F; // 设置定时器模式
 373   1          TMOD |= 0x50; // 定时器1设置为计数模式
 374   1          TL1 = 0;      // 设置定时初始值
 375   1          TH1 = 0;      // 设置定时初始值
 376   1          TF1 = 0;      // 清除TF1标志
 377   1          TR1 = 0;      // 定时器1开始计时
 378   1      }
 379          
 380          void main()
 381          {
 382   1          Init_Sys();
 383   1          Init_State();
 384   1          Timer0_Init();
 385   1          Timer1_Init();
 386   1          while (1)
 387   1          {
 388   2              Key_pro();
 389   2              NiXie_pro();
 390   2              Led_pro();
 391   2          }
 392   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1900    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     51    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
